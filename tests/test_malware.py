import os
import pytest
import sys

# Include the parent directory in the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from malware import is_malicious_file, is_file_corrupted

# Test file paths (adjust as necessary)
MALICIOUS_FILE_PATH = os.path.join(os.path.dirname(__file__), '..', 'eicar.com')
CLEAN_FILE_PATH = os.path.join(os.path.dirname(__file__), 'clean_test_file.txt')

# Malicious signature (EICAR test file signature)
MALICIOUS_SIGNATURE = b"X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
EXPECTED_SIGNATURE = b"GIF89a"  # Example signature for test

@pytest.fixture
def create_clean_file():
    """Fixture to create a temporary clean file for testing."""
    with open(CLEAN_FILE_PATH, 'wb') as f:
        f.write(EXPECTED_SIGNATURE)
    yield
    os.remove(CLEAN_FILE_PATH)

def test_is_malicious_file_found():
    """Test that the malicious file is correctly identified."""
    assert is_malicious_file(MALICIOUS_FILE_PATH, MALICIOUS_SIGNATURE) is True

def test_is_malicious_file_not_found(create_clean_file):
    """Test that a clean file is not identified as malicious."""
    assert is_malicious_file(CLEAN_FILE_PATH, MALICIOUS_SIGNATURE) is False

def test_is_file_corrupted_not_corrupted(create_clean_file):
    """Test that the file is not corrupted if the signature matches."""
    assert is_file_corrupted(CLEAN_FILE_PATH, EXPECTED_SIGNATURE) is True

def test_is_file_corrupted_corrupted():
    """Test that the file is corrupted if the signature does not match."""
    assert is_file_corrupted(MALICIOUS_FILE_PATH, EXPECTED_SIGNATURE) is False
