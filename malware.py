import os
import hashlib
import logging

def is_malicious_file(file_path, malicious_signatures):
    """
    Checks if a file contains a malicious signature.

    Args:
        file_path (str): Path to the file to be scanned.
        malicious_signatures (list): A list of malicious signatures.

    Returns:
        bool: True if the signature is found, False otherwise.
    """
    try:
        with open(file_path, "rb") as file:
            file_content = file.read()
            for signature in malicious_signatures:
                if signature in file_content:
                    return True
        return False
    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
    except Exception as e:
        logging.error(f"An error occurred while checking {file_path}: {e}")
    return False

def is_file_corrupted(file_path, expected_hash):
    """
    Checks if a file is corrupted based on its hash.

    Args:
        file_path (str): Path to the file to be scanned.
        expected_hash (str): The expected hash of the file.

    Returns:
        bool: True if the hash matches, False otherwise.
    """
    try:
        with open(file_path, 'rb') as file:
            actual_hash = hashlib.sha256(file.read()).hexdigest()
            return actual_hash != expected_hash
    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
    except Exception as e:
        logging.error(f"An error occurred while checking {file_path}: {e}")
    return True

def delete_file(file_path):
    """
    Deletes a file and logs the action.

    Args:
        file_path (str): Path to the file to be deleted.
    """
    try:
        os.remove(file_path)
        logging.info(f"Deleted malicious file: {file_path}")
    except Exception as e:
        logging.error(f"Failed to delete file {file_path}: {e}")

def scan_files(directory, malicious_signatures, expected_hashes):
    """
    Scans all files in a directory for malicious signatures and corruption.

    Args:
        directory (str): Path to the directory to be scanned.
        malicious_signatures (list): A list of malicious signatures.
        expected_hashes (dict): A dictionary of expected hashes for files.
    """
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            logging.info(f"Scanning file: {file_path}")

            if is_malicious_file(file_path, malicious_signatures):
                logging.warning(f"Malicious file detected: {file_path}")
                print(f"A malicious file has been detected: {file_path}")
                delete_file(file_path)
            elif file_path in expected_hashes and is_file_corrupted(file_path, expected_hashes[file_path]):
                logging.warning(f"File is corrupted: {file_path}")
                # Handle corrupted file (e.g., notify user, quarantine)
            else:
                logging.info(f"File appears to be clean: {file_path}")

if __name__ == "__main__":
    # Set up logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    # Define malicious signatures and expected file hashes
    malicious_signatures = [
        b"X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*",
        # Add more malicious signatures here
    ]
    expected_hashes = {
        "path/to/important/file.txt": "expected_hash_value",
        # Add more expected hashes here
    }

    # Define paths to be scanned
    single_file_path = r"C:\Users\Documents\antivirus\eicar.com.txt"
    target_directory = r"C:\dev"

    # Scan single file
    if is_malicious_file(single_file_path, malicious_signatures):
        print(f"A malicious file has been detected: {single_file_path}")
        delete_file(single_file_path)
    else:
        logging.info(f"Single file appears to be clean: {single_file_path}")

    # Scan directory
    scan_files(target_directory, malicious_signatures, expected_hashes)